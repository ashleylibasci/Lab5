
/Users/ashleylibasci/IoTFolderLabs/Lab5/target/5.3.2/argon/Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000e4c  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b4e68  000b4e68  00004e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e664  000b4e8c  0000e664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000120  2003e6d0  2003e6d0  0001e6d0  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b4ef8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b4efc  000b4efc  00014efc  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b4f02  000b4f02  00014f02  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b4f26  000b4f26  00014f26  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   000daf32  00000000  00000000  00014f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000ca05  00000000  00000000  000efe5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0002fe1b  00000000  00000000  000fc861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002070  00000000  00000000  0012c67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00009008  00000000  00000000  0012e6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002f1c9  00000000  00000000  001376f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002ccc3  00000000  00000000  001668bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00132884  00000000  00000000  00193580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005c1c  00000000  00000000  002c5e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f000 fd6f 	bl	b4b20 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f000 fd77 	bl	b4b3c <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003e664 	.word	0x2003e664
   b4058:	000b4e8c 	.word	0x000b4e8c
   b405c:	2003e6d0 	.word	0x2003e6d0
   b4060:	2003e6d0 	.word	0x2003e6d0
   b4064:	2003e7f0 	.word	0x2003e7f0

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f000 fcdd 	bl	b4a2c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b4e44 	.word	0x000b4e44
   b408c:	000b4e68 	.word	0x000b4e68

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b813 	b.w	b40ba <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f811 	bl	b40bc <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f000 bc7d 	b.w	b499c <_post_loop>

000b40a2 <_Znaj>:
   b40a2:	f000 b945 	b.w	b4330 <malloc>

000b40a6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a6:	f000 b94b 	b.w	b4340 <free>

000b40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40aa:	7800      	ldrb	r0, [r0, #0]
   b40ac:	fab0 f080 	clz	r0, r0
   b40b0:	0940      	lsrs	r0, r0, #5
   b40b2:	4770      	bx	lr

000b40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b4:	2301      	movs	r3, #1
   b40b6:	7003      	strb	r3, [r0, #0]
   b40b8:	4770      	bx	lr

000b40ba <setup>:
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);

void setup() {
  
}
   b40ba:	4770      	bx	lr

000b40bc <loop>:
   b40bc:	4770      	bx	lr
	...

000b40c0 <_GLOBAL__sub_I_SystemMode>:


void loop() {
 
   b40c0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b40c2:	4b07      	ldr	r3, [pc, #28]	; (b40e0 <_GLOBAL__sub_I_SystemMode+0x20>)
    SleepResult() {}
   b40c4:	4a07      	ldr	r2, [pc, #28]	; (b40e4 <_GLOBAL__sub_I_SystemMode+0x24>)
   b40c6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b40c8:	2400      	movs	r4, #0
   b40ca:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b40ce:	2003      	movs	r0, #3
   b40d0:	f000 f8a2 	bl	b4218 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b40d4:	4621      	mov	r1, r4
   b40d6:	2001      	movs	r0, #1
   b40d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   b40dc:	f000 b8a4 	b.w	b4228 <system_thread_set_state>
   b40e0:	2003e6d0 	.word	0x2003e6d0
   b40e4:	ffff0000 	.word	0xffff0000

000b40e8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b40e8:	b508      	push	{r3, lr}
   b40ea:	4b02      	ldr	r3, [pc, #8]	; (b40f4 <os_mutex_recursive_create+0xc>)
   b40ec:	681b      	ldr	r3, [r3, #0]
   b40ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b40f0:	9301      	str	r3, [sp, #4]
   b40f2:	bd08      	pop	{r3, pc}
   b40f4:	00030248 	.word	0x00030248

000b40f8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b40f8:	b508      	push	{r3, lr}
   b40fa:	4b02      	ldr	r3, [pc, #8]	; (b4104 <HAL_RNG_GetRandomNumber+0xc>)
   b40fc:	681b      	ldr	r3, [r3, #0]
   b40fe:	685b      	ldr	r3, [r3, #4]
   b4100:	9301      	str	r3, [sp, #4]
   b4102:	bd08      	pop	{r3, pc}
   b4104:	00030218 	.word	0x00030218

000b4108 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4108:	b508      	push	{r3, lr}
   b410a:	4b02      	ldr	r3, [pc, #8]	; (b4114 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b410c:	681b      	ldr	r3, [r3, #0]
   b410e:	695b      	ldr	r3, [r3, #20]
   b4110:	9301      	str	r3, [sp, #4]
   b4112:	bd08      	pop	{r3, pc}
   b4114:	00030218 	.word	0x00030218

000b4118 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4118:	b508      	push	{r3, lr}
   b411a:	4b02      	ldr	r3, [pc, #8]	; (b4124 <inet_inet_ntop+0xc>)
   b411c:	681b      	ldr	r3, [r3, #0]
   b411e:	695b      	ldr	r3, [r3, #20]
   b4120:	9301      	str	r3, [sp, #4]
   b4122:	bd08      	pop	{r3, pc}
   b4124:	00030264 	.word	0x00030264

000b4128 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4128:	b508      	push	{r3, lr}
   b412a:	4b02      	ldr	r3, [pc, #8]	; (b4134 <netdb_freeaddrinfo+0xc>)
   b412c:	681b      	ldr	r3, [r3, #0]
   b412e:	689b      	ldr	r3, [r3, #8]
   b4130:	9301      	str	r3, [sp, #4]
   b4132:	bd08      	pop	{r3, pc}
   b4134:	00030268 	.word	0x00030268

000b4138 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4138:	b508      	push	{r3, lr}
   b413a:	4b02      	ldr	r3, [pc, #8]	; (b4144 <netdb_getaddrinfo+0xc>)
   b413c:	681b      	ldr	r3, [r3, #0]
   b413e:	68db      	ldr	r3, [r3, #12]
   b4140:	9301      	str	r3, [sp, #4]
   b4142:	bd08      	pop	{r3, pc}
   b4144:	00030268 	.word	0x00030268

000b4148 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4148:	b508      	push	{r3, lr}
   b414a:	4b02      	ldr	r3, [pc, #8]	; (b4154 <hal_usart_write+0xc>)
   b414c:	681b      	ldr	r3, [r3, #0]
   b414e:	68db      	ldr	r3, [r3, #12]
   b4150:	9301      	str	r3, [sp, #4]
   b4152:	bd08      	pop	{r3, pc}
   b4154:	0003023c 	.word	0x0003023c

000b4158 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4158:	b508      	push	{r3, lr}
   b415a:	4b02      	ldr	r3, [pc, #8]	; (b4164 <hal_usart_available+0xc>)
   b415c:	681b      	ldr	r3, [r3, #0]
   b415e:	691b      	ldr	r3, [r3, #16]
   b4160:	9301      	str	r3, [sp, #4]
   b4162:	bd08      	pop	{r3, pc}
   b4164:	0003023c 	.word	0x0003023c

000b4168 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4168:	b508      	push	{r3, lr}
   b416a:	4b02      	ldr	r3, [pc, #8]	; (b4174 <hal_usart_read+0xc>)
   b416c:	681b      	ldr	r3, [r3, #0]
   b416e:	695b      	ldr	r3, [r3, #20]
   b4170:	9301      	str	r3, [sp, #4]
   b4172:	bd08      	pop	{r3, pc}
   b4174:	0003023c 	.word	0x0003023c

000b4178 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4178:	b508      	push	{r3, lr}
   b417a:	4b02      	ldr	r3, [pc, #8]	; (b4184 <hal_usart_peek+0xc>)
   b417c:	681b      	ldr	r3, [r3, #0]
   b417e:	699b      	ldr	r3, [r3, #24]
   b4180:	9301      	str	r3, [sp, #4]
   b4182:	bd08      	pop	{r3, pc}
   b4184:	0003023c 	.word	0x0003023c

000b4188 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4188:	b508      	push	{r3, lr}
   b418a:	4b02      	ldr	r3, [pc, #8]	; (b4194 <hal_usart_flush+0xc>)
   b418c:	681b      	ldr	r3, [r3, #0]
   b418e:	69db      	ldr	r3, [r3, #28]
   b4190:	9301      	str	r3, [sp, #4]
   b4192:	bd08      	pop	{r3, pc}
   b4194:	0003023c 	.word	0x0003023c

000b4198 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4198:	b508      	push	{r3, lr}
   b419a:	4b02      	ldr	r3, [pc, #8]	; (b41a4 <hal_usart_available_data_for_write+0xc>)
   b419c:	681b      	ldr	r3, [r3, #0]
   b419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b41a0:	9301      	str	r3, [sp, #4]
   b41a2:	bd08      	pop	{r3, pc}
   b41a4:	0003023c 	.word	0x0003023c

000b41a8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b41a8:	b508      	push	{r3, lr}
   b41aa:	4b02      	ldr	r3, [pc, #8]	; (b41b4 <hal_usart_init_ex+0xc>)
   b41ac:	681b      	ldr	r3, [r3, #0]
   b41ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b41b0:	9301      	str	r3, [sp, #4]
   b41b2:	bd08      	pop	{r3, pc}
   b41b4:	0003023c 	.word	0x0003023c

000b41b8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b41b8:	b508      	push	{r3, lr}
   b41ba:	4b02      	ldr	r3, [pc, #8]	; (b41c4 <HAL_USB_USART_Init+0xc>)
   b41bc:	681b      	ldr	r3, [r3, #0]
   b41be:	681b      	ldr	r3, [r3, #0]
   b41c0:	9301      	str	r3, [sp, #4]
   b41c2:	bd08      	pop	{r3, pc}
   b41c4:	0003024c 	.word	0x0003024c

000b41c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b41c8:	b508      	push	{r3, lr}
   b41ca:	4b02      	ldr	r3, [pc, #8]	; (b41d4 <HAL_USB_USART_Available_Data+0xc>)
   b41cc:	681b      	ldr	r3, [r3, #0]
   b41ce:	691b      	ldr	r3, [r3, #16]
   b41d0:	9301      	str	r3, [sp, #4]
   b41d2:	bd08      	pop	{r3, pc}
   b41d4:	0003024c 	.word	0x0003024c

000b41d8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b41d8:	b508      	push	{r3, lr}
   b41da:	4b02      	ldr	r3, [pc, #8]	; (b41e4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b41dc:	681b      	ldr	r3, [r3, #0]
   b41de:	695b      	ldr	r3, [r3, #20]
   b41e0:	9301      	str	r3, [sp, #4]
   b41e2:	bd08      	pop	{r3, pc}
   b41e4:	0003024c 	.word	0x0003024c

000b41e8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b41e8:	b508      	push	{r3, lr}
   b41ea:	4b02      	ldr	r3, [pc, #8]	; (b41f4 <HAL_USB_USART_Receive_Data+0xc>)
   b41ec:	681b      	ldr	r3, [r3, #0]
   b41ee:	699b      	ldr	r3, [r3, #24]
   b41f0:	9301      	str	r3, [sp, #4]
   b41f2:	bd08      	pop	{r3, pc}
   b41f4:	0003024c 	.word	0x0003024c

000b41f8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b41f8:	b508      	push	{r3, lr}
   b41fa:	4b02      	ldr	r3, [pc, #8]	; (b4204 <HAL_USB_USART_Send_Data+0xc>)
   b41fc:	681b      	ldr	r3, [r3, #0]
   b41fe:	69db      	ldr	r3, [r3, #28]
   b4200:	9301      	str	r3, [sp, #4]
   b4202:	bd08      	pop	{r3, pc}
   b4204:	0003024c 	.word	0x0003024c

000b4208 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4208:	b508      	push	{r3, lr}
   b420a:	4b02      	ldr	r3, [pc, #8]	; (b4214 <HAL_USB_USART_Flush_Data+0xc>)
   b420c:	681b      	ldr	r3, [r3, #0]
   b420e:	6a1b      	ldr	r3, [r3, #32]
   b4210:	9301      	str	r3, [sp, #4]
   b4212:	bd08      	pop	{r3, pc}
   b4214:	0003024c 	.word	0x0003024c

000b4218 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4218:	b508      	push	{r3, lr}
   b421a:	4b02      	ldr	r3, [pc, #8]	; (b4224 <set_system_mode+0xc>)
   b421c:	681b      	ldr	r3, [r3, #0]
   b421e:	685b      	ldr	r3, [r3, #4]
   b4220:	9301      	str	r3, [sp, #4]
   b4222:	bd08      	pop	{r3, pc}
   b4224:	00030220 	.word	0x00030220

000b4228 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4228:	b508      	push	{r3, lr}
   b422a:	4b02      	ldr	r3, [pc, #8]	; (b4234 <system_thread_set_state+0xc>)
   b422c:	681b      	ldr	r3, [r3, #0]
   b422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4230:	9301      	str	r3, [sp, #4]
   b4232:	bd08      	pop	{r3, pc}
   b4234:	00030220 	.word	0x00030220

000b4238 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4238:	b508      	push	{r3, lr}
   b423a:	4b03      	ldr	r3, [pc, #12]	; (b4248 <system_ctrl_set_app_request_handler+0x10>)
   b423c:	681b      	ldr	r3, [r3, #0]
   b423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4242:	9301      	str	r3, [sp, #4]
   b4244:	bd08      	pop	{r3, pc}
   b4246:	0000      	.short	0x0000
   b4248:	00030220 	.word	0x00030220

000b424c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b424c:	b508      	push	{r3, lr}
   b424e:	4b03      	ldr	r3, [pc, #12]	; (b425c <system_ctrl_set_result+0x10>)
   b4250:	681b      	ldr	r3, [r3, #0]
   b4252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4256:	9301      	str	r3, [sp, #4]
   b4258:	bd08      	pop	{r3, pc}
   b425a:	0000      	.short	0x0000
   b425c:	00030220 	.word	0x00030220

000b4260 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4260:	b508      	push	{r3, lr}
   b4262:	4b02      	ldr	r3, [pc, #8]	; (b426c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4264:	681b      	ldr	r3, [r3, #0]
   b4266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4268:	9301      	str	r3, [sp, #4]
   b426a:	bd08      	pop	{r3, pc}
   b426c:	00030244 	.word	0x00030244

000b4270 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4270:	b508      	push	{r3, lr}
   b4272:	4b02      	ldr	r3, [pc, #8]	; (b427c <network_connect+0xc>)
   b4274:	681b      	ldr	r3, [r3, #0]
   b4276:	685b      	ldr	r3, [r3, #4]
   b4278:	9301      	str	r3, [sp, #4]
   b427a:	bd08      	pop	{r3, pc}
   b427c:	00030240 	.word	0x00030240

000b4280 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4280:	b508      	push	{r3, lr}
   b4282:	4b02      	ldr	r3, [pc, #8]	; (b428c <network_connecting+0xc>)
   b4284:	681b      	ldr	r3, [r3, #0]
   b4286:	689b      	ldr	r3, [r3, #8]
   b4288:	9301      	str	r3, [sp, #4]
   b428a:	bd08      	pop	{r3, pc}
   b428c:	00030240 	.word	0x00030240

000b4290 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4290:	b508      	push	{r3, lr}
   b4292:	4b02      	ldr	r3, [pc, #8]	; (b429c <network_disconnect+0xc>)
   b4294:	681b      	ldr	r3, [r3, #0]
   b4296:	68db      	ldr	r3, [r3, #12]
   b4298:	9301      	str	r3, [sp, #4]
   b429a:	bd08      	pop	{r3, pc}
   b429c:	00030240 	.word	0x00030240

000b42a0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b42a0:	b508      	push	{r3, lr}
   b42a2:	4b02      	ldr	r3, [pc, #8]	; (b42ac <network_ready+0xc>)
   b42a4:	681b      	ldr	r3, [r3, #0]
   b42a6:	691b      	ldr	r3, [r3, #16]
   b42a8:	9301      	str	r3, [sp, #4]
   b42aa:	bd08      	pop	{r3, pc}
   b42ac:	00030240 	.word	0x00030240

000b42b0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b42b0:	b508      	push	{r3, lr}
   b42b2:	4b02      	ldr	r3, [pc, #8]	; (b42bc <network_on+0xc>)
   b42b4:	681b      	ldr	r3, [r3, #0]
   b42b6:	695b      	ldr	r3, [r3, #20]
   b42b8:	9301      	str	r3, [sp, #4]
   b42ba:	bd08      	pop	{r3, pc}
   b42bc:	00030240 	.word	0x00030240

000b42c0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b42c0:	b508      	push	{r3, lr}
   b42c2:	4b02      	ldr	r3, [pc, #8]	; (b42cc <network_off+0xc>)
   b42c4:	681b      	ldr	r3, [r3, #0]
   b42c6:	699b      	ldr	r3, [r3, #24]
   b42c8:	9301      	str	r3, [sp, #4]
   b42ca:	bd08      	pop	{r3, pc}
   b42cc:	00030240 	.word	0x00030240

000b42d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b42d0:	b508      	push	{r3, lr}
   b42d2:	4b02      	ldr	r3, [pc, #8]	; (b42dc <network_listen+0xc>)
   b42d4:	681b      	ldr	r3, [r3, #0]
   b42d6:	69db      	ldr	r3, [r3, #28]
   b42d8:	9301      	str	r3, [sp, #4]
   b42da:	bd08      	pop	{r3, pc}
   b42dc:	00030240 	.word	0x00030240

000b42e0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b42e0:	b508      	push	{r3, lr}
   b42e2:	4b02      	ldr	r3, [pc, #8]	; (b42ec <network_listening+0xc>)
   b42e4:	681b      	ldr	r3, [r3, #0]
   b42e6:	6a1b      	ldr	r3, [r3, #32]
   b42e8:	9301      	str	r3, [sp, #4]
   b42ea:	bd08      	pop	{r3, pc}
   b42ec:	00030240 	.word	0x00030240

000b42f0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b42f0:	b508      	push	{r3, lr}
   b42f2:	4b02      	ldr	r3, [pc, #8]	; (b42fc <network_set_listen_timeout+0xc>)
   b42f4:	681b      	ldr	r3, [r3, #0]
   b42f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b42f8:	9301      	str	r3, [sp, #4]
   b42fa:	bd08      	pop	{r3, pc}
   b42fc:	00030240 	.word	0x00030240

000b4300 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4300:	b508      	push	{r3, lr}
   b4302:	4b02      	ldr	r3, [pc, #8]	; (b430c <network_get_listen_timeout+0xc>)
   b4304:	681b      	ldr	r3, [r3, #0]
   b4306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4308:	9301      	str	r3, [sp, #4]
   b430a:	bd08      	pop	{r3, pc}
   b430c:	00030240 	.word	0x00030240

000b4310 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4310:	b508      	push	{r3, lr}
   b4312:	4b02      	ldr	r3, [pc, #8]	; (b431c <network_is_on+0xc>)
   b4314:	681b      	ldr	r3, [r3, #0]
   b4316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4318:	9301      	str	r3, [sp, #4]
   b431a:	bd08      	pop	{r3, pc}
   b431c:	00030240 	.word	0x00030240

000b4320 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4320:	b508      	push	{r3, lr}
   b4322:	4b02      	ldr	r3, [pc, #8]	; (b432c <network_is_off+0xc>)
   b4324:	681b      	ldr	r3, [r3, #0]
   b4326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4328:	9301      	str	r3, [sp, #4]
   b432a:	bd08      	pop	{r3, pc}
   b432c:	00030240 	.word	0x00030240

000b4330 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4330:	b508      	push	{r3, lr}
   b4332:	4b02      	ldr	r3, [pc, #8]	; (b433c <malloc+0xc>)
   b4334:	681b      	ldr	r3, [r3, #0]
   b4336:	681b      	ldr	r3, [r3, #0]
   b4338:	9301      	str	r3, [sp, #4]
   b433a:	bd08      	pop	{r3, pc}
   b433c:	0003021c 	.word	0x0003021c

000b4340 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4340:	b508      	push	{r3, lr}
   b4342:	4b02      	ldr	r3, [pc, #8]	; (b434c <free+0xc>)
   b4344:	681b      	ldr	r3, [r3, #0]
   b4346:	685b      	ldr	r3, [r3, #4]
   b4348:	9301      	str	r3, [sp, #4]
   b434a:	bd08      	pop	{r3, pc}
   b434c:	0003021c 	.word	0x0003021c

000b4350 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4350:	b508      	push	{r3, lr}
   b4352:	4b02      	ldr	r3, [pc, #8]	; (b435c <__assert_func+0xc>)
   b4354:	681b      	ldr	r3, [r3, #0]
   b4356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4358:	9301      	str	r3, [sp, #4]
   b435a:	bd08      	pop	{r3, pc}
   b435c:	0003021c 	.word	0x0003021c

000b4360 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4360:	b508      	push	{r3, lr}
   b4362:	4b02      	ldr	r3, [pc, #8]	; (b436c <newlib_impure_ptr_callback+0xc>)
   b4364:	681b      	ldr	r3, [r3, #0]
   b4366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4368:	9301      	str	r3, [sp, #4]
   b436a:	bd08      	pop	{r3, pc}
   b436c:	0003021c 	.word	0x0003021c

000b4370 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4370:	4802      	ldr	r0, [pc, #8]	; (b437c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4372:	2300      	movs	r3, #0
   b4374:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4376:	f7ff beb7 	b.w	b40e8 <os_mutex_recursive_create>
   b437a:	bf00      	nop
   b437c:	2003e6dc 	.word	0x2003e6dc

000b4380 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4380:	2200      	movs	r2, #0
   b4382:	6840      	ldr	r0, [r0, #4]
   b4384:	4611      	mov	r1, r2
   b4386:	f7ff bfab 	b.w	b42e0 <network_listening>

000b438a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b438a:	2200      	movs	r2, #0
   b438c:	6840      	ldr	r0, [r0, #4]
   b438e:	4611      	mov	r1, r2
   b4390:	f7ff bfb6 	b.w	b4300 <network_get_listen_timeout>

000b4394 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4394:	6840      	ldr	r0, [r0, #4]
   b4396:	2200      	movs	r2, #0
   b4398:	f7ff bfaa 	b.w	b42f0 <network_set_listen_timeout>

000b439c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b439c:	6840      	ldr	r0, [r0, #4]
   b439e:	2200      	movs	r2, #0
   b43a0:	f081 0101 	eor.w	r1, r1, #1
   b43a4:	f7ff bf94 	b.w	b42d0 <network_listen>

000b43a8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b43a8:	2300      	movs	r3, #0
   b43aa:	6840      	ldr	r0, [r0, #4]
   b43ac:	461a      	mov	r2, r3
   b43ae:	4619      	mov	r1, r3
   b43b0:	f7ff bf86 	b.w	b42c0 <network_off>

000b43b4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b43b4:	2300      	movs	r3, #0
   b43b6:	6840      	ldr	r0, [r0, #4]
   b43b8:	461a      	mov	r2, r3
   b43ba:	4619      	mov	r1, r3
   b43bc:	f7ff bf78 	b.w	b42b0 <network_on>

000b43c0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b43c0:	2200      	movs	r2, #0
   b43c2:	6840      	ldr	r0, [r0, #4]
   b43c4:	4611      	mov	r1, r2
   b43c6:	f7ff bf6b 	b.w	b42a0 <network_ready>

000b43ca <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b43ca:	2200      	movs	r2, #0
   b43cc:	6840      	ldr	r0, [r0, #4]
   b43ce:	4611      	mov	r1, r2
   b43d0:	f7ff bf56 	b.w	b4280 <network_connecting>

000b43d4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b43d4:	6840      	ldr	r0, [r0, #4]
   b43d6:	2200      	movs	r2, #0
   b43d8:	2102      	movs	r1, #2
   b43da:	f7ff bf59 	b.w	b4290 <network_disconnect>

000b43de <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b43de:	2300      	movs	r3, #0
   b43e0:	6840      	ldr	r0, [r0, #4]
   b43e2:	461a      	mov	r2, r3
   b43e4:	f7ff bf44 	b.w	b4270 <network_connect>

000b43e8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b43e8:	4b02      	ldr	r3, [pc, #8]	; (b43f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b43ea:	2203      	movs	r2, #3
   b43ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b43ee:	4a02      	ldr	r2, [pc, #8]	; (b43f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b43f0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b43f2:	4770      	bx	lr
   b43f4:	2003e6e0 	.word	0x2003e6e0
   b43f8:	000b4c90 	.word	0x000b4c90

000b43fc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b43fc:	4770      	bx	lr

000b43fe <_ZN9IPAddressD0Ev>:
   b43fe:	b510      	push	{r4, lr}
   b4400:	2118      	movs	r1, #24
   b4402:	4604      	mov	r4, r0
   b4404:	f7ff fe4f 	bl	b40a6 <_ZdlPvj>
   b4408:	4620      	mov	r0, r4
   b440a:	bd10      	pop	{r4, pc}

000b440c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b440c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b440e:	7d03      	ldrb	r3, [r0, #20]
   b4410:	2b06      	cmp	r3, #6
{
   b4412:	b08d      	sub	sp, #52	; 0x34
   b4414:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4416:	f100 0704 	add.w	r7, r0, #4
   b441a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b441e:	d012      	beq.n	b4446 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4420:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4424:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4428:	220a      	movs	r2, #10
   b442a:	4630      	mov	r0, r6
   b442c:	f000 f943 	bl	b46b6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4430:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4432:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4434:	d019      	beq.n	b446a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4436:	2c00      	cmp	r4, #0
   b4438:	d0f4      	beq.n	b4424 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b443a:	212e      	movs	r1, #46	; 0x2e
   b443c:	4630      	mov	r0, r6
   b443e:	f000 f937 	bl	b46b0 <_ZN5Print5printEc>
   b4442:	4404      	add	r4, r0
   b4444:	e7ee      	b.n	b4424 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4446:	232f      	movs	r3, #47	; 0x2f
   b4448:	466a      	mov	r2, sp
   b444a:	4639      	mov	r1, r7
   b444c:	200a      	movs	r0, #10
		buf[0] = 0;
   b444e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4452:	f7ff fe61 	bl	b4118 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4456:	4668      	mov	r0, sp
   b4458:	f7ff fde0 	bl	b401c <strlen>
   b445c:	6833      	ldr	r3, [r6, #0]
   b445e:	4602      	mov	r2, r0
   b4460:	68db      	ldr	r3, [r3, #12]
   b4462:	4669      	mov	r1, sp
   b4464:	4630      	mov	r0, r6
   b4466:	4798      	blx	r3
   b4468:	4604      	mov	r4, r0
    }
    return n;
}
   b446a:	4620      	mov	r0, r4
   b446c:	b00d      	add	sp, #52	; 0x34
   b446e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4470 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4470:	b510      	push	{r4, lr}
   b4472:	4b05      	ldr	r3, [pc, #20]	; (b4488 <_ZN9IPAddressC1Ev+0x18>)
   b4474:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4476:	2211      	movs	r2, #17
   b4478:	f840 3b04 	str.w	r3, [r0], #4
   b447c:	2100      	movs	r1, #0
   b447e:	f000 fb5d 	bl	b4b3c <memset>
}
   b4482:	4620      	mov	r0, r4
   b4484:	bd10      	pop	{r4, pc}
   b4486:	bf00      	nop
   b4488:	000b4ccc 	.word	0x000b4ccc

000b448c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b448c:	4603      	mov	r3, r0
   b448e:	4a07      	ldr	r2, [pc, #28]	; (b44ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4490:	b510      	push	{r4, lr}
   b4492:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4496:	f101 0210 	add.w	r2, r1, #16
   b449a:	f851 4b04 	ldr.w	r4, [r1], #4
   b449e:	f843 4b04 	str.w	r4, [r3], #4
   b44a2:	4291      	cmp	r1, r2
   b44a4:	d1f9      	bne.n	b449a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b44a6:	780a      	ldrb	r2, [r1, #0]
   b44a8:	701a      	strb	r2, [r3, #0]
}
   b44aa:	bd10      	pop	{r4, pc}
   b44ac:	000b4ccc 	.word	0x000b4ccc

000b44b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b44b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b44b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b44b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b44ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b44be:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b44c2:	2304      	movs	r3, #4
   b44c4:	6041      	str	r1, [r0, #4]
   b44c6:	7503      	strb	r3, [r0, #20]
}
   b44c8:	bd10      	pop	{r4, pc}
	...

000b44cc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b44cc:	b507      	push	{r0, r1, r2, lr}
   b44ce:	4b06      	ldr	r3, [pc, #24]	; (b44e8 <_ZN9IPAddressC1EPKh+0x1c>)
   b44d0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b44d2:	78cb      	ldrb	r3, [r1, #3]
   b44d4:	9300      	str	r3, [sp, #0]
   b44d6:	788b      	ldrb	r3, [r1, #2]
   b44d8:	784a      	ldrb	r2, [r1, #1]
   b44da:	7809      	ldrb	r1, [r1, #0]
   b44dc:	f7ff ffe8 	bl	b44b0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b44e0:	b003      	add	sp, #12
   b44e2:	f85d fb04 	ldr.w	pc, [sp], #4
   b44e6:	bf00      	nop
   b44e8:	000b4ccc 	.word	0x000b4ccc

000b44ec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b44ec:	4b01      	ldr	r3, [pc, #4]	; (b44f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b44ee:	4a02      	ldr	r2, [pc, #8]	; (b44f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b44f0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b44f2:	4770      	bx	lr
   b44f4:	2003e6e8 	.word	0x2003e6e8
   b44f8:	000b4cd8 	.word	0x000b4cd8

000b44fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b44fc:	2300      	movs	r3, #0
   b44fe:	6840      	ldr	r0, [r0, #4]
   b4500:	461a      	mov	r2, r3
   b4502:	f7ff beb5 	b.w	b4270 <network_connect>

000b4506 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4506:	6840      	ldr	r0, [r0, #4]
   b4508:	2200      	movs	r2, #0
   b450a:	2102      	movs	r1, #2
   b450c:	f7ff bec0 	b.w	b4290 <network_disconnect>

000b4510 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4510:	2200      	movs	r2, #0
   b4512:	6840      	ldr	r0, [r0, #4]
   b4514:	4611      	mov	r1, r2
   b4516:	f7ff beb3 	b.w	b4280 <network_connecting>

000b451a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b451a:	2200      	movs	r2, #0
   b451c:	6840      	ldr	r0, [r0, #4]
   b451e:	4611      	mov	r1, r2
   b4520:	f7ff bebe 	b.w	b42a0 <network_ready>

000b4524 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4524:	2300      	movs	r3, #0
   b4526:	6840      	ldr	r0, [r0, #4]
   b4528:	461a      	mov	r2, r3
   b452a:	4619      	mov	r1, r3
   b452c:	f7ff bec0 	b.w	b42b0 <network_on>

000b4530 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4530:	2300      	movs	r3, #0
   b4532:	6840      	ldr	r0, [r0, #4]
   b4534:	461a      	mov	r2, r3
   b4536:	4619      	mov	r1, r3
   b4538:	f7ff bec2 	b.w	b42c0 <network_off>

000b453c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b453c:	6840      	ldr	r0, [r0, #4]
   b453e:	2100      	movs	r1, #0
   b4540:	f7ff bee6 	b.w	b4310 <network_is_on>

000b4544 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4544:	6840      	ldr	r0, [r0, #4]
   b4546:	2100      	movs	r1, #0
   b4548:	f7ff beea 	b.w	b4320 <network_is_off>

000b454c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b454c:	6840      	ldr	r0, [r0, #4]
   b454e:	2200      	movs	r2, #0
   b4550:	f081 0101 	eor.w	r1, r1, #1
   b4554:	f7ff bebc 	b.w	b42d0 <network_listen>

000b4558 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4558:	6840      	ldr	r0, [r0, #4]
   b455a:	2200      	movs	r2, #0
   b455c:	f7ff bec8 	b.w	b42f0 <network_set_listen_timeout>

000b4560 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4560:	2200      	movs	r2, #0
   b4562:	6840      	ldr	r0, [r0, #4]
   b4564:	4611      	mov	r1, r2
   b4566:	f7ff becb 	b.w	b4300 <network_get_listen_timeout>

000b456a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b456a:	2200      	movs	r2, #0
   b456c:	6840      	ldr	r0, [r0, #4]
   b456e:	4611      	mov	r1, r2
   b4570:	f7ff beb6 	b.w	b42e0 <network_listening>

000b4574 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4578:	b095      	sub	sp, #84	; 0x54
   b457a:	4614      	mov	r4, r2
   b457c:	460d      	mov	r5, r1
   b457e:	4607      	mov	r7, r0
    IPAddress addr;
   b4580:	f7ff ff76 	bl	b4470 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4584:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4586:	221c      	movs	r2, #28
   b4588:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b458a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b458c:	f000 fad6 	bl	b4b3c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4590:	2340      	movs	r3, #64	; 0x40
   b4592:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4594:	4620      	mov	r0, r4
   b4596:	466b      	mov	r3, sp
   b4598:	aa0c      	add	r2, sp, #48	; 0x30
   b459a:	2100      	movs	r1, #0
   b459c:	f7ff fdcc 	bl	b4138 <netdb_getaddrinfo>
    if (!r) {
   b45a0:	4604      	mov	r4, r0
   b45a2:	2800      	cmp	r0, #0
   b45a4:	d14b      	bne.n	b463e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b45a6:	4602      	mov	r2, r0
   b45a8:	2101      	movs	r1, #1
   b45aa:	6868      	ldr	r0, [r5, #4]
   b45ac:	f7ff fe78 	bl	b42a0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b45b0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b45b2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b45b4:	4622      	mov	r2, r4
   b45b6:	6868      	ldr	r0, [r5, #4]
   b45b8:	f7ff fe72 	bl	b42a0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b45bc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b45be:	4681      	mov	r9, r0
        bool ok = false;
   b45c0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b45c2:	2e00      	cmp	r6, #0
   b45c4:	d03b      	beq.n	b463e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b45c6:	2900      	cmp	r1, #0
   b45c8:	d139      	bne.n	b463e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b45ca:	6873      	ldr	r3, [r6, #4]
   b45cc:	2b02      	cmp	r3, #2
   b45ce:	d003      	beq.n	b45d8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b45d0:	2b0a      	cmp	r3, #10
   b45d2:	d011      	beq.n	b45f8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b45d4:	69f6      	ldr	r6, [r6, #28]
   b45d6:	e7f4      	b.n	b45c2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b45d8:	f1b8 0f00 	cmp.w	r8, #0
   b45dc:	d0fa      	beq.n	b45d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b45de:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b45e0:	a806      	add	r0, sp, #24
   b45e2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b45e4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b45e6:	f7ff ff71 	bl	b44cc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b45ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b45ec:	1d3c      	adds	r4, r7, #4
   b45ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b45f0:	682b      	ldr	r3, [r5, #0]
   b45f2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b45f4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b45f6:	e7ed      	b.n	b45d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b45f8:	f1b9 0f00 	cmp.w	r9, #0
   b45fc:	d0ea      	beq.n	b45d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b45fe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4600:	2210      	movs	r2, #16
   b4602:	a801      	add	r0, sp, #4
   b4604:	f000 fa9a 	bl	b4b3c <memset>
                    a.v = 6;
   b4608:	2306      	movs	r3, #6
   b460a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b460e:	ad01      	add	r5, sp, #4
   b4610:	f104 0308 	add.w	r3, r4, #8
   b4614:	3418      	adds	r4, #24
   b4616:	6818      	ldr	r0, [r3, #0]
   b4618:	6859      	ldr	r1, [r3, #4]
   b461a:	462a      	mov	r2, r5
   b461c:	c203      	stmia	r2!, {r0, r1}
   b461e:	3308      	adds	r3, #8
   b4620:	42a3      	cmp	r3, r4
   b4622:	4615      	mov	r5, r2
   b4624:	d1f7      	bne.n	b4616 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4626:	a901      	add	r1, sp, #4
   b4628:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b462a:	ad07      	add	r5, sp, #28
   b462c:	f7ff ff2e 	bl	b448c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4632:	1d3c      	adds	r4, r7, #4
   b4634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4636:	682b      	ldr	r3, [r5, #0]
   b4638:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b463a:	4649      	mov	r1, r9
   b463c:	e7ca      	b.n	b45d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b463e:	9800      	ldr	r0, [sp, #0]
   b4640:	f7ff fd72 	bl	b4128 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4644:	4638      	mov	r0, r7
   b4646:	b015      	add	sp, #84	; 0x54
   b4648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b464c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b464c:	4b02      	ldr	r3, [pc, #8]	; (b4658 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b464e:	4a03      	ldr	r2, [pc, #12]	; (b465c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4650:	601a      	str	r2, [r3, #0]
   b4652:	2200      	movs	r2, #0
   b4654:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b4656:	4770      	bx	lr
   b4658:	2003e6ec 	.word	0x2003e6ec
   b465c:	000b4ce4 	.word	0x000b4ce4

000b4660 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4662:	4606      	mov	r6, r0
   b4664:	460d      	mov	r5, r1
  size_t n = 0;
   b4666:	188f      	adds	r7, r1, r2
   b4668:	2400      	movs	r4, #0
  while (size--) {
   b466a:	42bd      	cmp	r5, r7
   b466c:	d00c      	beq.n	b4688 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b466e:	6833      	ldr	r3, [r6, #0]
   b4670:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4674:	689b      	ldr	r3, [r3, #8]
   b4676:	4630      	mov	r0, r6
   b4678:	4798      	blx	r3
     if (chunk>=0)
   b467a:	1e03      	subs	r3, r0, #0
   b467c:	db01      	blt.n	b4682 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b467e:	441c      	add	r4, r3
  while (size--) {
   b4680:	e7f3      	b.n	b466a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4682:	2c00      	cmp	r4, #0
   b4684:	bf08      	it	eq
   b4686:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4688:	4620      	mov	r0, r4
   b468a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b468c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b468c:	b513      	push	{r0, r1, r4, lr}
   b468e:	4604      	mov	r4, r0
    }
   b4690:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4692:	b159      	cbz	r1, b46ac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4694:	9101      	str	r1, [sp, #4]
   b4696:	f7ff fcc1 	bl	b401c <strlen>
   b469a:	6823      	ldr	r3, [r4, #0]
   b469c:	9901      	ldr	r1, [sp, #4]
   b469e:	68db      	ldr	r3, [r3, #12]
   b46a0:	4602      	mov	r2, r0
   b46a2:	4620      	mov	r0, r4
    }
   b46a4:	b002      	add	sp, #8
   b46a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b46aa:	4718      	bx	r3
    }
   b46ac:	b002      	add	sp, #8
   b46ae:	bd10      	pop	{r4, pc}

000b46b0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b46b0:	6803      	ldr	r3, [r0, #0]
   b46b2:	689b      	ldr	r3, [r3, #8]
   b46b4:	4718      	bx	r3

000b46b6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b46b6:	b530      	push	{r4, r5, lr}
   b46b8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b46ba:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b46bc:	2a01      	cmp	r2, #1
  *str = '\0';
   b46be:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b46c2:	bf98      	it	ls
   b46c4:	220a      	movls	r2, #10
   b46c6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b46c8:	460d      	mov	r5, r1
   b46ca:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b46ce:	fb01 5312 	mls	r3, r1, r2, r5
   b46d2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b46d6:	2b09      	cmp	r3, #9
   b46d8:	bf94      	ite	ls
   b46da:	3330      	addls	r3, #48	; 0x30
   b46dc:	3337      	addhi	r3, #55	; 0x37
   b46de:	b2db      	uxtb	r3, r3
  } while(n);
   b46e0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b46e2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b46e6:	d9ef      	bls.n	b46c8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b46e8:	4621      	mov	r1, r4
   b46ea:	f7ff ffcf 	bl	b468c <_ZN5Print5writeEPKc>
}
   b46ee:	b00b      	add	sp, #44	; 0x2c
   b46f0:	bd30      	pop	{r4, r5, pc}
	...

000b46f4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b46f4:	4b01      	ldr	r3, [pc, #4]	; (b46fc <_GLOBAL__sub_I_RGB+0x8>)
   b46f6:	2200      	movs	r2, #0
   b46f8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b46fa:	4770      	bx	lr
   b46fc:	2003e6f4 	.word	0x2003e6f4

000b4700 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4700:	4b05      	ldr	r3, [pc, #20]	; (b4718 <_GLOBAL__sub_I_System+0x18>)
   b4702:	2202      	movs	r2, #2
   b4704:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4706:	4b05      	ldr	r3, [pc, #20]	; (b471c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4708:	4a05      	ldr	r2, [pc, #20]	; (b4720 <_GLOBAL__sub_I_System+0x20>)
   b470a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b470c:	2000      	movs	r0, #0
   b470e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4712:	f7ff bd81 	b.w	b4218 <set_system_mode>
   b4716:	bf00      	nop
   b4718:	2003e710 	.word	0x2003e710
   b471c:	2003e704 	.word	0x2003e704
   b4720:	ffff0000 	.word	0xffff0000

000b4724 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4724:	4b02      	ldr	r3, [pc, #8]	; (b4730 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4726:	681a      	ldr	r2, [r3, #0]
   b4728:	4b02      	ldr	r3, [pc, #8]	; (b4734 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b472a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b472c:	4770      	bx	lr
   b472e:	bf00      	nop
   b4730:	2003e664 	.word	0x2003e664
   b4734:	2003e714 	.word	0x2003e714

000b4738 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4738:	4770      	bx	lr

000b473a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b473a:	7441      	strb	r1, [r0, #17]
}
   b473c:	4770      	bx	lr

000b473e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b473e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4740:	7c00      	ldrb	r0, [r0, #16]
   b4742:	f7ff fd29 	bl	b4198 <hal_usart_available_data_for_write>
}
   b4746:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b474a:	bd08      	pop	{r3, pc}

000b474c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b474c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b474e:	7c00      	ldrb	r0, [r0, #16]
   b4750:	f7ff fd02 	bl	b4158 <hal_usart_available>
}
   b4754:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4758:	bd08      	pop	{r3, pc}

000b475a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b475a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b475c:	7c00      	ldrb	r0, [r0, #16]
   b475e:	f7ff fd0b 	bl	b4178 <hal_usart_peek>
}
   b4762:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4766:	bd08      	pop	{r3, pc}

000b4768 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4768:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b476a:	7c00      	ldrb	r0, [r0, #16]
   b476c:	f7ff fcfc 	bl	b4168 <hal_usart_read>
}
   b4770:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4774:	bd08      	pop	{r3, pc}

000b4776 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4776:	7c00      	ldrb	r0, [r0, #16]
   b4778:	f7ff bd06 	b.w	b4188 <hal_usart_flush>

000b477c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b477c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b477e:	7c45      	ldrb	r5, [r0, #17]
{
   b4780:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4782:	b12d      	cbz	r5, b4790 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4784:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4786:	b003      	add	sp, #12
   b4788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b478c:	f7ff bcdc 	b.w	b4148 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4790:	7c00      	ldrb	r0, [r0, #16]
   b4792:	9101      	str	r1, [sp, #4]
   b4794:	f7ff fd00 	bl	b4198 <hal_usart_available_data_for_write>
   b4798:	2800      	cmp	r0, #0
   b479a:	9901      	ldr	r1, [sp, #4]
   b479c:	dcf2      	bgt.n	b4784 <_ZN11USARTSerial5writeEh+0x8>
}
   b479e:	4628      	mov	r0, r5
   b47a0:	b003      	add	sp, #12
   b47a2:	bd30      	pop	{r4, r5, pc}

000b47a4 <_ZN11USARTSerialD0Ev>:
   b47a4:	b510      	push	{r4, lr}
   b47a6:	2114      	movs	r1, #20
   b47a8:	4604      	mov	r4, r0
   b47aa:	f7ff fc7c 	bl	b40a6 <_ZdlPvj>
   b47ae:	4620      	mov	r0, r4
   b47b0:	bd10      	pop	{r4, pc}
	...

000b47b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b47b4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b47b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b47ba:	4604      	mov	r4, r0
   b47bc:	4608      	mov	r0, r1
   b47be:	4611      	mov	r1, r2
   b47c0:	2200      	movs	r2, #0
   b47c2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b47c6:	4b04      	ldr	r3, [pc, #16]	; (b47d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b47c8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b47ca:	2301      	movs	r3, #1
  _serial = serial;
   b47cc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b47ce:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b47d0:	f7ff fcea 	bl	b41a8 <hal_usart_init_ex>
}
   b47d4:	4620      	mov	r0, r4
   b47d6:	bd10      	pop	{r4, pc}
   b47d8:	000b4d3c 	.word	0x000b4d3c

000b47dc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b47dc:	7441      	strb	r1, [r0, #17]
}
   b47de:	4770      	bx	lr

000b47e0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b47e0:	4770      	bx	lr

000b47e2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b47e2:	4770      	bx	lr

000b47e4 <_ZN9USBSerial4readEv>:
{
   b47e4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b47e6:	2100      	movs	r1, #0
   b47e8:	7c00      	ldrb	r0, [r0, #16]
   b47ea:	f7ff fcfd 	bl	b41e8 <HAL_USB_USART_Receive_Data>
}
   b47ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b47f2:	bd08      	pop	{r3, pc}

000b47f4 <_ZN9USBSerial4peekEv>:
{
   b47f4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b47f6:	2101      	movs	r1, #1
   b47f8:	7c00      	ldrb	r0, [r0, #16]
   b47fa:	f7ff fcf5 	bl	b41e8 <HAL_USB_USART_Receive_Data>
}
   b47fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4802:	bd08      	pop	{r3, pc}

000b4804 <_ZN9USBSerial17availableForWriteEv>:
{
   b4804:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4806:	7c00      	ldrb	r0, [r0, #16]
   b4808:	f7ff fce6 	bl	b41d8 <HAL_USB_USART_Available_Data_For_Write>
}
   b480c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4810:	bd08      	pop	{r3, pc}

000b4812 <_ZN9USBSerial9availableEv>:
{
   b4812:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4814:	7c00      	ldrb	r0, [r0, #16]
   b4816:	f7ff fcd7 	bl	b41c8 <HAL_USB_USART_Available_Data>
}
   b481a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b481e:	bd08      	pop	{r3, pc}

000b4820 <_ZN9USBSerial5writeEh>:
{
   b4820:	b513      	push	{r0, r1, r4, lr}
   b4822:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4824:	7c00      	ldrb	r0, [r0, #16]
{
   b4826:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4828:	f7ff fcd6 	bl	b41d8 <HAL_USB_USART_Available_Data_For_Write>
   b482c:	2800      	cmp	r0, #0
   b482e:	9901      	ldr	r1, [sp, #4]
   b4830:	dc01      	bgt.n	b4836 <_ZN9USBSerial5writeEh+0x16>
   b4832:	7c60      	ldrb	r0, [r4, #17]
   b4834:	b120      	cbz	r0, b4840 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4836:	7c20      	ldrb	r0, [r4, #16]
   b4838:	f7ff fcde 	bl	b41f8 <HAL_USB_USART_Send_Data>
   b483c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4840:	b002      	add	sp, #8
   b4842:	bd10      	pop	{r4, pc}

000b4844 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4844:	7c00      	ldrb	r0, [r0, #16]
   b4846:	f7ff bcdf 	b.w	b4208 <HAL_USB_USART_Flush_Data>

000b484a <_ZN9USBSerialD0Ev>:
   b484a:	b510      	push	{r4, lr}
   b484c:	2114      	movs	r1, #20
   b484e:	4604      	mov	r4, r0
   b4850:	f7ff fc29 	bl	b40a6 <_ZdlPvj>
   b4854:	4620      	mov	r0, r4
   b4856:	bd10      	pop	{r4, pc}

000b4858 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4858:	b510      	push	{r4, lr}
   b485a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b485e:	4604      	mov	r4, r0
   b4860:	4608      	mov	r0, r1
   b4862:	2100      	movs	r1, #0
   b4864:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4868:	4b04      	ldr	r3, [pc, #16]	; (b487c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b486a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b486c:	2301      	movs	r3, #1
  _serial = serial;
   b486e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4870:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4872:	4611      	mov	r1, r2
   b4874:	f7ff fca0 	bl	b41b8 <HAL_USB_USART_Init>
}
   b4878:	4620      	mov	r0, r4
   b487a:	bd10      	pop	{r4, pc}
   b487c:	000b4d6c 	.word	0x000b4d6c

000b4880 <_Z19acquireSerialBufferv>:
{
   b4880:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4882:	2214      	movs	r2, #20
{
   b4884:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4886:	2100      	movs	r1, #0
   b4888:	f000 f958 	bl	b4b3c <memset>
}
   b488c:	4620      	mov	r0, r4
   b488e:	bd10      	pop	{r4, pc}

000b4890 <_Z16_fetch_usbserialv>:
{
   b4890:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4892:	4c0f      	ldr	r4, [pc, #60]	; (b48d0 <_Z16_fetch_usbserialv+0x40>)
{
   b4894:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4896:	a803      	add	r0, sp, #12
   b4898:	f7ff fff2 	bl	b4880 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b489c:	7821      	ldrb	r1, [r4, #0]
   b489e:	f3bf 8f5b 	dmb	ish
   b48a2:	f011 0101 	ands.w	r1, r1, #1
   b48a6:	d10f      	bne.n	b48c8 <_Z16_fetch_usbserialv+0x38>
   b48a8:	4620      	mov	r0, r4
   b48aa:	9101      	str	r1, [sp, #4]
   b48ac:	f7ff fbfd 	bl	b40aa <__cxa_guard_acquire>
   b48b0:	9901      	ldr	r1, [sp, #4]
   b48b2:	b148      	cbz	r0, b48c8 <_Z16_fetch_usbserialv+0x38>
   b48b4:	aa03      	add	r2, sp, #12
   b48b6:	4807      	ldr	r0, [pc, #28]	; (b48d4 <_Z16_fetch_usbserialv+0x44>)
   b48b8:	f7ff ffce 	bl	b4858 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b48bc:	4620      	mov	r0, r4
   b48be:	f7ff fbf9 	bl	b40b4 <__cxa_guard_release>
   b48c2:	4805      	ldr	r0, [pc, #20]	; (b48d8 <_Z16_fetch_usbserialv+0x48>)
   b48c4:	f000 f926 	bl	b4b14 <atexit>
	return _usbserial;
}
   b48c8:	4802      	ldr	r0, [pc, #8]	; (b48d4 <_Z16_fetch_usbserialv+0x44>)
   b48ca:	b008      	add	sp, #32
   b48cc:	bd10      	pop	{r4, pc}
   b48ce:	bf00      	nop
   b48d0:	2003e718 	.word	0x2003e718
   b48d4:	2003e71c 	.word	0x2003e71c
   b48d8:	000b47e1 	.word	0x000b47e1

000b48dc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b48dc:	2200      	movs	r2, #0
   b48de:	6840      	ldr	r0, [r0, #4]
   b48e0:	4611      	mov	r1, r2
   b48e2:	f7ff bcdd 	b.w	b42a0 <network_ready>

000b48e6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b48e6:	2200      	movs	r2, #0
   b48e8:	6840      	ldr	r0, [r0, #4]
   b48ea:	4611      	mov	r1, r2
   b48ec:	f7ff bcf8 	b.w	b42e0 <network_listening>

000b48f0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b48f0:	2200      	movs	r2, #0
   b48f2:	6840      	ldr	r0, [r0, #4]
   b48f4:	4611      	mov	r1, r2
   b48f6:	f7ff bd03 	b.w	b4300 <network_get_listen_timeout>

000b48fa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b48fa:	6840      	ldr	r0, [r0, #4]
   b48fc:	2200      	movs	r2, #0
   b48fe:	f7ff bcf7 	b.w	b42f0 <network_set_listen_timeout>

000b4902 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4902:	6840      	ldr	r0, [r0, #4]
   b4904:	2200      	movs	r2, #0
   b4906:	f081 0101 	eor.w	r1, r1, #1
   b490a:	f7ff bce1 	b.w	b42d0 <network_listen>

000b490e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b490e:	2300      	movs	r3, #0
   b4910:	6840      	ldr	r0, [r0, #4]
   b4912:	461a      	mov	r2, r3
   b4914:	4619      	mov	r1, r3
   b4916:	f7ff bcd3 	b.w	b42c0 <network_off>

000b491a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b491a:	2300      	movs	r3, #0
   b491c:	6840      	ldr	r0, [r0, #4]
   b491e:	461a      	mov	r2, r3
   b4920:	4619      	mov	r1, r3
   b4922:	f7ff bcc5 	b.w	b42b0 <network_on>

000b4926 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4926:	2200      	movs	r2, #0
   b4928:	6840      	ldr	r0, [r0, #4]
   b492a:	4611      	mov	r1, r2
   b492c:	f7ff bca8 	b.w	b4280 <network_connecting>

000b4930 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4930:	6840      	ldr	r0, [r0, #4]
   b4932:	2200      	movs	r2, #0
   b4934:	2102      	movs	r1, #2
   b4936:	f7ff bcab 	b.w	b4290 <network_disconnect>

000b493a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b493a:	2300      	movs	r3, #0
   b493c:	6840      	ldr	r0, [r0, #4]
   b493e:	461a      	mov	r2, r3
   b4940:	f7ff bc96 	b.w	b4270 <network_connect>

000b4944 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4944:	4b02      	ldr	r3, [pc, #8]	; (b4950 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4946:	2204      	movs	r2, #4
   b4948:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b494a:	4a02      	ldr	r2, [pc, #8]	; (b4954 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b494c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b494e:	4770      	bx	lr
   b4950:	2003e730 	.word	0x2003e730
   b4954:	000b4d9c 	.word	0x000b4d9c

000b4958 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4958:	4b01      	ldr	r3, [pc, #4]	; (b4960 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b495a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b495c:	4770      	bx	lr
   b495e:	bf00      	nop
   b4960:	2003e668 	.word	0x2003e668

000b4964 <serialEventRun>:
{
   b4964:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4966:	4b0b      	ldr	r3, [pc, #44]	; (b4994 <serialEventRun+0x30>)
   b4968:	b143      	cbz	r3, b497c <serialEventRun+0x18>
   b496a:	f7ff ff91 	bl	b4890 <_Z16_fetch_usbserialv>
   b496e:	6803      	ldr	r3, [r0, #0]
   b4970:	691b      	ldr	r3, [r3, #16]
   b4972:	4798      	blx	r3
   b4974:	2800      	cmp	r0, #0
   b4976:	dd01      	ble.n	b497c <serialEventRun+0x18>
        serialEvent();
   b4978:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b497c:	4b06      	ldr	r3, [pc, #24]	; (b4998 <serialEventRun+0x34>)
   b497e:	b143      	cbz	r3, b4992 <serialEventRun+0x2e>
   b4980:	f000 f8a2 	bl	b4ac8 <_Z22__fetch_global_Serial1v>
   b4984:	6803      	ldr	r3, [r0, #0]
   b4986:	691b      	ldr	r3, [r3, #16]
   b4988:	4798      	blx	r3
   b498a:	2800      	cmp	r0, #0
   b498c:	dd01      	ble.n	b4992 <serialEventRun+0x2e>
        serialEvent1();
   b498e:	f3af 8000 	nop.w
}
   b4992:	bd08      	pop	{r3, pc}
	...

000b499c <_post_loop>:
{
   b499c:	b508      	push	{r3, lr}
	serialEventRun();
   b499e:	f7ff ffe1 	bl	b4964 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b49a2:	f7ff fbb1 	bl	b4108 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b49a6:	4b01      	ldr	r3, [pc, #4]	; (b49ac <_post_loop+0x10>)
   b49a8:	6018      	str	r0, [r3, #0]
}
   b49aa:	bd08      	pop	{r3, pc}
   b49ac:	2003e740 	.word	0x2003e740

000b49b0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b49b0:	4805      	ldr	r0, [pc, #20]	; (b49c8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b49b2:	4a06      	ldr	r2, [pc, #24]	; (b49cc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b49b4:	4906      	ldr	r1, [pc, #24]	; (b49d0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b49b6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b49b8:	1a12      	subs	r2, r2, r0
   b49ba:	f000 f8b1 	bl	b4b20 <memcpy>
    __backup_sram_signature = signature;
   b49be:	4b05      	ldr	r3, [pc, #20]	; (b49d4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b49c0:	4a05      	ldr	r2, [pc, #20]	; (b49d8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b49c2:	601a      	str	r2, [r3, #0]
}
   b49c4:	bd08      	pop	{r3, pc}
   b49c6:	bf00      	nop
   b49c8:	2003f400 	.word	0x2003f400
   b49cc:	2003f404 	.word	0x2003f404
   b49d0:	000b4ef8 	.word	0x000b4ef8
   b49d4:	2003f400 	.word	0x2003f400
   b49d8:	9a271c1e 	.word	0x9a271c1e

000b49dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b49dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b49de:	2300      	movs	r3, #0
   b49e0:	9300      	str	r3, [sp, #0]
   b49e2:	461a      	mov	r2, r3
   b49e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b49e8:	f7ff fc30 	bl	b424c <system_ctrl_set_result>
}
   b49ec:	b003      	add	sp, #12
   b49ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b49f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b49f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b49f6:	8843      	ldrh	r3, [r0, #2]
   b49f8:	2b0a      	cmp	r3, #10
   b49fa:	d008      	beq.n	b4a0e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b49fc:	2b50      	cmp	r3, #80	; 0x50
   b49fe:	d10b      	bne.n	b4a18 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4a00:	4b09      	ldr	r3, [pc, #36]	; (b4a28 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4a02:	681b      	ldr	r3, [r3, #0]
   b4a04:	b14b      	cbz	r3, b4a1a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4a06:	b003      	add	sp, #12
   b4a08:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4a0c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4a0e:	f7ff ffe5 	bl	b49dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4a12:	b003      	add	sp, #12
   b4a14:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4a18:	2300      	movs	r3, #0
   b4a1a:	9300      	str	r3, [sp, #0]
   b4a1c:	461a      	mov	r2, r3
   b4a1e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4a22:	f7ff fc13 	bl	b424c <system_ctrl_set_result>
}
   b4a26:	e7f4      	b.n	b4a12 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4a28:	2003e73c 	.word	0x2003e73c

000b4a2c <module_user_init_hook>:
{
   b4a2c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4a2e:	4812      	ldr	r0, [pc, #72]	; (b4a78 <module_user_init_hook+0x4c>)
   b4a30:	2100      	movs	r1, #0
   b4a32:	f7ff fc95 	bl	b4360 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4a36:	4b11      	ldr	r3, [pc, #68]	; (b4a7c <module_user_init_hook+0x50>)
   b4a38:	681a      	ldr	r2, [r3, #0]
   b4a3a:	4b11      	ldr	r3, [pc, #68]	; (b4a80 <module_user_init_hook+0x54>)
   b4a3c:	429a      	cmp	r2, r3
   b4a3e:	4b11      	ldr	r3, [pc, #68]	; (b4a84 <module_user_init_hook+0x58>)
   b4a40:	bf0c      	ite	eq
   b4a42:	2201      	moveq	r2, #1
   b4a44:	2200      	movne	r2, #0
   b4a46:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4a48:	d001      	beq.n	b4a4e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4a4a:	f7ff ffb1 	bl	b49b0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4a4e:	f7ff fb53 	bl	b40f8 <HAL_RNG_GetRandomNumber>
   b4a52:	4604      	mov	r4, r0
    srand(seed);
   b4a54:	f000 f87a 	bl	b4b4c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4a58:	4b0b      	ldr	r3, [pc, #44]	; (b4a88 <module_user_init_hook+0x5c>)
   b4a5a:	b113      	cbz	r3, b4a62 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4a5c:	4620      	mov	r0, r4
   b4a5e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4a62:	2100      	movs	r1, #0
   b4a64:	4808      	ldr	r0, [pc, #32]	; (b4a88 <module_user_init_hook+0x5c>)
   b4a66:	f7ff fbfb 	bl	b4260 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4a6e:	4807      	ldr	r0, [pc, #28]	; (b4a8c <module_user_init_hook+0x60>)
   b4a70:	2100      	movs	r1, #0
   b4a72:	f7ff bbe1 	b.w	b4238 <system_ctrl_set_app_request_handler>
   b4a76:	bf00      	nop
   b4a78:	000b4959 	.word	0x000b4959
   b4a7c:	2003f400 	.word	0x2003f400
   b4a80:	9a271c1e 	.word	0x9a271c1e
   b4a84:	2003e738 	.word	0x2003e738
   b4a88:	00000000 	.word	0x00000000
   b4a8c:	000b49f5 	.word	0x000b49f5

000b4a90 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4a90:	4770      	bx	lr
	...

000b4a94 <_Z20acquireSerial1Bufferv>:
{
   b4a94:	b538      	push	{r3, r4, r5, lr}
   b4a96:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b4a98:	2514      	movs	r5, #20
   b4a9a:	462a      	mov	r2, r5
   b4a9c:	2100      	movs	r1, #0
   b4a9e:	f000 f84d 	bl	b4b3c <memset>
   b4aa2:	8025      	strh	r5, [r4, #0]
   b4aa4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4aa6:	4907      	ldr	r1, [pc, #28]	; (b4ac4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b4aa8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4aaa:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b4aac:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4aae:	f000 f82f 	bl	b4b10 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4ab2:	4904      	ldr	r1, [pc, #16]	; (b4ac4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b4ab4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4ab6:	4628      	mov	r0, r5
   b4ab8:	f000 f82a 	bl	b4b10 <_ZnajRKSt9nothrow_t>
    };
   b4abc:	60e0      	str	r0, [r4, #12]
}
   b4abe:	4620      	mov	r0, r4
   b4ac0:	bd38      	pop	{r3, r4, r5, pc}
   b4ac2:	bf00      	nop
   b4ac4:	000b4dd0 	.word	0x000b4dd0

000b4ac8 <_Z22__fetch_global_Serial1v>:
{
   b4ac8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4aca:	4d0e      	ldr	r5, [pc, #56]	; (b4b04 <_Z22__fetch_global_Serial1v+0x3c>)
   b4acc:	7829      	ldrb	r1, [r5, #0]
   b4ace:	f3bf 8f5b 	dmb	ish
   b4ad2:	f011 0401 	ands.w	r4, r1, #1
{
   b4ad6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4ad8:	d111      	bne.n	b4afe <_Z22__fetch_global_Serial1v+0x36>
   b4ada:	4628      	mov	r0, r5
   b4adc:	f7ff fae5 	bl	b40aa <__cxa_guard_acquire>
   b4ae0:	b168      	cbz	r0, b4afe <_Z22__fetch_global_Serial1v+0x36>
   b4ae2:	a801      	add	r0, sp, #4
   b4ae4:	f7ff ffd6 	bl	b4a94 <_Z20acquireSerial1Bufferv>
   b4ae8:	aa01      	add	r2, sp, #4
   b4aea:	4621      	mov	r1, r4
   b4aec:	4806      	ldr	r0, [pc, #24]	; (b4b08 <_Z22__fetch_global_Serial1v+0x40>)
   b4aee:	f7ff fe61 	bl	b47b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b4af2:	4628      	mov	r0, r5
   b4af4:	f7ff fade 	bl	b40b4 <__cxa_guard_release>
   b4af8:	4804      	ldr	r0, [pc, #16]	; (b4b0c <_Z22__fetch_global_Serial1v+0x44>)
   b4afa:	f000 f80b 	bl	b4b14 <atexit>
    return serial1;
}
   b4afe:	4802      	ldr	r0, [pc, #8]	; (b4b08 <_Z22__fetch_global_Serial1v+0x40>)
   b4b00:	b007      	add	sp, #28
   b4b02:	bd30      	pop	{r4, r5, pc}
   b4b04:	2003e744 	.word	0x2003e744
   b4b08:	2003e748 	.word	0x2003e748
   b4b0c:	000b4a91 	.word	0x000b4a91

000b4b10 <_ZnajRKSt9nothrow_t>:
   b4b10:	f7ff bac7 	b.w	b40a2 <_Znaj>

000b4b14 <atexit>:
   b4b14:	2300      	movs	r3, #0
   b4b16:	4601      	mov	r1, r0
   b4b18:	461a      	mov	r2, r3
   b4b1a:	4618      	mov	r0, r3
   b4b1c:	f000 b844 	b.w	b4ba8 <__register_exitproc>

000b4b20 <memcpy>:
   b4b20:	440a      	add	r2, r1
   b4b22:	4291      	cmp	r1, r2
   b4b24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b4b28:	d100      	bne.n	b4b2c <memcpy+0xc>
   b4b2a:	4770      	bx	lr
   b4b2c:	b510      	push	{r4, lr}
   b4b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b4b32:	f803 4f01 	strb.w	r4, [r3, #1]!
   b4b36:	4291      	cmp	r1, r2
   b4b38:	d1f9      	bne.n	b4b2e <memcpy+0xe>
   b4b3a:	bd10      	pop	{r4, pc}

000b4b3c <memset>:
   b4b3c:	4402      	add	r2, r0
   b4b3e:	4603      	mov	r3, r0
   b4b40:	4293      	cmp	r3, r2
   b4b42:	d100      	bne.n	b4b46 <memset+0xa>
   b4b44:	4770      	bx	lr
   b4b46:	f803 1b01 	strb.w	r1, [r3], #1
   b4b4a:	e7f9      	b.n	b4b40 <memset+0x4>

000b4b4c <srand>:
   b4b4c:	b538      	push	{r3, r4, r5, lr}
   b4b4e:	4b10      	ldr	r3, [pc, #64]	; (b4b90 <srand+0x44>)
   b4b50:	681d      	ldr	r5, [r3, #0]
   b4b52:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b4b54:	4604      	mov	r4, r0
   b4b56:	b9b3      	cbnz	r3, b4b86 <srand+0x3a>
   b4b58:	2018      	movs	r0, #24
   b4b5a:	f7ff fbe9 	bl	b4330 <malloc>
   b4b5e:	4602      	mov	r2, r0
   b4b60:	63a8      	str	r0, [r5, #56]	; 0x38
   b4b62:	b920      	cbnz	r0, b4b6e <srand+0x22>
   b4b64:	4b0b      	ldr	r3, [pc, #44]	; (b4b94 <srand+0x48>)
   b4b66:	480c      	ldr	r0, [pc, #48]	; (b4b98 <srand+0x4c>)
   b4b68:	2142      	movs	r1, #66	; 0x42
   b4b6a:	f7ff fbf1 	bl	b4350 <__assert_func>
   b4b6e:	490b      	ldr	r1, [pc, #44]	; (b4b9c <srand+0x50>)
   b4b70:	4b0b      	ldr	r3, [pc, #44]	; (b4ba0 <srand+0x54>)
   b4b72:	e9c0 1300 	strd	r1, r3, [r0]
   b4b76:	4b0b      	ldr	r3, [pc, #44]	; (b4ba4 <srand+0x58>)
   b4b78:	6083      	str	r3, [r0, #8]
   b4b7a:	230b      	movs	r3, #11
   b4b7c:	8183      	strh	r3, [r0, #12]
   b4b7e:	2100      	movs	r1, #0
   b4b80:	2001      	movs	r0, #1
   b4b82:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b4b86:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b4b88:	2200      	movs	r2, #0
   b4b8a:	611c      	str	r4, [r3, #16]
   b4b8c:	615a      	str	r2, [r3, #20]
   b4b8e:	bd38      	pop	{r3, r4, r5, pc}
   b4b90:	2003e668 	.word	0x2003e668
   b4b94:	000b4dd1 	.word	0x000b4dd1
   b4b98:	000b4de8 	.word	0x000b4de8
   b4b9c:	abcd330e 	.word	0xabcd330e
   b4ba0:	e66d1234 	.word	0xe66d1234
   b4ba4:	0005deec 	.word	0x0005deec

000b4ba8 <__register_exitproc>:
   b4ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4bac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b4c68 <__register_exitproc+0xc0>
   b4bb0:	4606      	mov	r6, r0
   b4bb2:	f8d8 0000 	ldr.w	r0, [r8]
   b4bb6:	461f      	mov	r7, r3
   b4bb8:	460d      	mov	r5, r1
   b4bba:	4691      	mov	r9, r2
   b4bbc:	f000 f856 	bl	b4c6c <__retarget_lock_acquire_recursive>
   b4bc0:	4b25      	ldr	r3, [pc, #148]	; (b4c58 <__register_exitproc+0xb0>)
   b4bc2:	681c      	ldr	r4, [r3, #0]
   b4bc4:	b934      	cbnz	r4, b4bd4 <__register_exitproc+0x2c>
   b4bc6:	4c25      	ldr	r4, [pc, #148]	; (b4c5c <__register_exitproc+0xb4>)
   b4bc8:	601c      	str	r4, [r3, #0]
   b4bca:	4b25      	ldr	r3, [pc, #148]	; (b4c60 <__register_exitproc+0xb8>)
   b4bcc:	b113      	cbz	r3, b4bd4 <__register_exitproc+0x2c>
   b4bce:	681b      	ldr	r3, [r3, #0]
   b4bd0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b4bd4:	6863      	ldr	r3, [r4, #4]
   b4bd6:	2b1f      	cmp	r3, #31
   b4bd8:	dd07      	ble.n	b4bea <__register_exitproc+0x42>
   b4bda:	f8d8 0000 	ldr.w	r0, [r8]
   b4bde:	f000 f847 	bl	b4c70 <__retarget_lock_release_recursive>
   b4be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4bea:	b34e      	cbz	r6, b4c40 <__register_exitproc+0x98>
   b4bec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b4bf0:	b988      	cbnz	r0, b4c16 <__register_exitproc+0x6e>
   b4bf2:	4b1c      	ldr	r3, [pc, #112]	; (b4c64 <__register_exitproc+0xbc>)
   b4bf4:	b923      	cbnz	r3, b4c00 <__register_exitproc+0x58>
   b4bf6:	f8d8 0000 	ldr.w	r0, [r8]
   b4bfa:	f000 f838 	bl	b4c6e <__retarget_lock_release>
   b4bfe:	e7f0      	b.n	b4be2 <__register_exitproc+0x3a>
   b4c00:	f44f 7084 	mov.w	r0, #264	; 0x108
   b4c04:	f7ff fb94 	bl	b4330 <malloc>
   b4c08:	2800      	cmp	r0, #0
   b4c0a:	d0f4      	beq.n	b4bf6 <__register_exitproc+0x4e>
   b4c0c:	2300      	movs	r3, #0
   b4c0e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b4c12:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b4c16:	6863      	ldr	r3, [r4, #4]
   b4c18:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b4c1c:	2201      	movs	r2, #1
   b4c1e:	409a      	lsls	r2, r3
   b4c20:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b4c24:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b4c28:	4313      	orrs	r3, r2
   b4c2a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b4c2e:	2e02      	cmp	r6, #2
   b4c30:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b4c34:	bf02      	ittt	eq
   b4c36:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b4c3a:	4313      	orreq	r3, r2
   b4c3c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b4c40:	6863      	ldr	r3, [r4, #4]
   b4c42:	f8d8 0000 	ldr.w	r0, [r8]
   b4c46:	1c5a      	adds	r2, r3, #1
   b4c48:	3302      	adds	r3, #2
   b4c4a:	6062      	str	r2, [r4, #4]
   b4c4c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b4c50:	f000 f80e 	bl	b4c70 <__retarget_lock_release_recursive>
   b4c54:	2000      	movs	r0, #0
   b4c56:	e7c6      	b.n	b4be6 <__register_exitproc+0x3e>
   b4c58:	2003e7e8 	.word	0x2003e7e8
   b4c5c:	2003e75c 	.word	0x2003e75c
   b4c60:	00000000 	.word	0x00000000
   b4c64:	000b4331 	.word	0x000b4331
   b4c68:	2003e6cc 	.word	0x2003e6cc

000b4c6c <__retarget_lock_acquire_recursive>:
   b4c6c:	4770      	bx	lr

000b4c6e <__retarget_lock_release>:
   b4c6e:	4770      	bx	lr

000b4c70 <__retarget_lock_release_recursive>:
   b4c70:	4770      	bx	lr

000b4c72 <link_code_end>:
	...

000b4c74 <dynalib_user>:
   b4c74:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b4c84:	0000 0000                                   ....

000b4c88 <_ZTVN5spark13EthernetClassE>:
	...
   b4c90:	43df 000b 43d5 000b 43cb 000b 43c1 000b     .C...C...C...C..
   b4ca0:	43b5 000b 43a9 000b 453d 000b 4545 000b     .C...C..=E..EE..
   b4cb0:	439d 000b 4395 000b 438b 000b 4381 000b     .C...C...C...C..
   b4cc0:	4575 000b                                   uE..

000b4cc4 <_ZTV9IPAddress>:
	...
   b4ccc:	440d 000b 43fd 000b 43ff 000b 7061 0070     .D...C...C..app.

000b4cdc <_ZTVN5spark12NetworkClassE>:
	...
   b4ce4:	44fd 000b 4507 000b 4511 000b 451b 000b     .D...E...E...E..
   b4cf4:	4525 000b 4531 000b 453d 000b 4545 000b     %E..1E..=E..EE..
   b4d04:	454d 000b 4559 000b 4561 000b 456b 000b     ME..YE..aE..kE..
   b4d14:	4575 000b 5925 252d 2d6d 6425 2554 3a48     uE..%Y-%m-%dT%H:
   b4d24:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b4d34 <_ZTV11USARTSerial>:
	...
   b4d3c:	4739 000b 47a5 000b 477d 000b 4661 000b     9G...G..}G..aF..
   b4d4c:	474d 000b 4769 000b 475b 000b 4777 000b     MG..iG..[G..wG..
   b4d5c:	473b 000b 473f 000b                         ;G..?G..

000b4d64 <_ZTV9USBSerial>:
	...
   b4d6c:	47e3 000b 484b 000b 4821 000b 4661 000b     .G..KH..!H..aF..
   b4d7c:	4813 000b 47e5 000b 47f5 000b 4845 000b     .H...G...G..EH..
   b4d8c:	4805 000b 47dd 000b                         .H...G..

000b4d94 <_ZTVN5spark9WiFiClassE>:
	...
   b4d9c:	493b 000b 4931 000b 4927 000b 48dd 000b     ;I..1I..'I...H..
   b4dac:	491b 000b 490f 000b 453d 000b 4545 000b     .I...I..=E..EE..
   b4dbc:	4903 000b 48fb 000b 48f1 000b 48e7 000b     .I...H...H...H..
   b4dcc:	4575 000b                                   uE..

000b4dd0 <_ZSt7nothrow>:
   b4dd0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b4de0:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b4df0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b4e00:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b4e10:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b4e20:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b4e30:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b4e41 <link_const_data_end>:
   b4e41:	00          	.byte	0x00
	...

000b4e44 <link_constructors_location>:
   b4e44:	000b40c1 	.word	0x000b40c1
   b4e48:	000b4371 	.word	0x000b4371
   b4e4c:	000b43e9 	.word	0x000b43e9
   b4e50:	000b44ed 	.word	0x000b44ed
   b4e54:	000b464d 	.word	0x000b464d
   b4e58:	000b46f5 	.word	0x000b46f5
   b4e5c:	000b4701 	.word	0x000b4701
   b4e60:	000b4725 	.word	0x000b4725
   b4e64:	000b4945 	.word	0x000b4945
